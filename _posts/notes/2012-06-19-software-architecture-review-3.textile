---
layout: post
title: 软件架构复习笔记(3) -- 软件体系结构的风格
category: note
home: no
published: true
meta:
  location: NJU
tags: [architecture, review, note]
---

要求：
* 描述或比较相关的风格
* 对给定场景判断需要使用的风格

h2. 主程序/子程序风格 (Main Program/Subroutine Style)

约束：
* 基于声名-使用（程序调用）关系建立连接件，层次分解的方式建立系统部件
* 上层部件可以使用下层部件，但下层部件不能使用上层部件，即不允许你方向调用
* 系统应该是单线程执行。主程序部件拥有最初的执行控制权，并在“使用”中将控制权转移给下层子程序
* 子程序只能够通过上层转移来获取控制权，可以在执行中将控制权转角给下层子程序，并在自身执行完成之后将控制权交还给上层部件

优点：
* 流程清晰，易于理解
* 强控制性。
* 发生错误的时候，可惜迅速定位错误源

缺点：
* 程序调用是一种强耦合的连接方式。
* 程序调用的连接方式限制了各部件之间的数据交互，可能会使得不同的部件使用隐含的共享数据交流，产生不必要的公共耦合，进而破坏它的“正确性”控制力

应用：编程语言没有模块化的支持。使用结构化的方法建立的东西。

h2. 面向对象风格 (Object-Oriented Style)

约束：
* 用信息内聚的标准，为系统建立对象部件。对外体统服务接口，隐藏内部数据表示
* 基于方法调用建立连接件
* 每个对象负责维护自身数据的一致性和完整性，并为此提供“正确”的服务
* 每个对象是一个自治的关系，平级，没有主次，从属，层次，分解

优点：
* 内部实现的可修改性
* 易开发，易理解，易复用的组织结构

缺点：
* 接口耦合性
* 标识耦合性
* 副作用，很难实现程序的正确性

应用：
* 主要问题是标识和保护相关的数据信息
* 能够将数据信息和相关操作联系起来，进行封装的系统
* 基于抽象数据类型建立的软件系统

h2. 分层风格 (Layered Style)

为了做到稳定依赖，所以使用分层

约束：
* 从最底层到最高层，部件抽象层次提高。
* 层次间要遵守特定的交互协议（接口）
* 跨层次的连接是禁止的，禁止跨层调用
* 逆向的连接是禁止的，禁止低层调用高层

优点：
* 设计机制清晰，易于理解
* 支持并行开发
* 更好的可复用性与内部修改性
* 逻辑协作

缺点：
* 交互协议很难修改
* 性能有损失
* 难以确定层次数量和粒度

应用：
* 主要功能能够在不同的抽象层次上进行任务分解的复杂处理
* 能够建立不同抽象层次的稳定交互协议
* 没有很高实时性能要求，能够容忍稍许延迟

h2. 隐式调用风格 (Implicit Invocation Style)

约束：
* 多个部件可以声名同一个事件类型
* 多个部件可以注册同一个事件类型
* 时间广播这不知道那些部件会收到影响
* 部件不能假设对事件的处理是顺序，也不能假设对事件的处理结果
* 各个部件之间几乎完全解耦

优点：
* 可复用性
* 可修改性
* 性能，可以并发

缺点：
* 弱控制性
* 很难进行测试和验证

应用：适用于以松散耦合部件为基础建立的软件系统

h2. 管道过滤器风格 (Pipe-Filter Style)

约束：
* 每个过滤器都独立工作
* 过滤器之间不能共享任何状态，不能共享任何数据，数据解耦，控制解耦
* 实现单个过滤器是，不能讲结果的正确性依赖于执行顺序上
* 可以并发

优点：
* 可复用性
* 内部可修改性
* 可扩展性
* 性能，可并发
* 支持特定分析，如吞吐量和死锁检测

缺点：
* 弱控制性和弱交互性
* 空间效率较差
* 性能浪费，管道传输耗时
* 错误处理问题

应用：适用于那些需要对同一数据流进行一系列独立计算的应用

h2. 存储库风格 (Repository Style)

约束：
所有知识源都是相互独立的，彼此不互相调用
所有知识源依赖于共享数据
知识源负责实时检查共享数据的状态，并且在必要时作出反映

优点：
* 空间效率
* 性能，可以并发
* 知识源的可修改性
* 容错性和健壮性

缺点：
* 共享数据的难修改性
* 共享数据的瓶颈
* 弱控制性

应用：以建立、增强和维护一个复杂信息中心为主要问题的应用系统。需要长期储存数据，进行多种方式的处理。

h2. MVC 风格

约束:
* MVC分别是关于业务逻辑、表现和控制三种不同内容抽象
* 如果 View 需要持续地显示某个数据的状态，那么它需要在 Model 中注册
* View 只能使用 Model 的数据查询服务，只有 Control 可以调用修改 Model 状态
* 用户行为有 View 发起，必须交给 Control 控制处理
* Model 相对独立，不依赖于 View 也不依赖与 Control

优点：
* 易开发性
* View 和 Control 的可修改性
* 适宜于网络系统开发

缺点：
* 复杂性
* Model 修改困难

应用：MVC 网络系统开发

h2. 客户端/服务器风格(Client/Server Style)

约束：
* 服务器较为固定，每个客户端知道服务器的标识
* 客户端可以动态增减，服务器不知道客户端的标识
* 各个客户端之间相互独立，他们都依赖于服务器

优点：
* 易开发
* 客户端的动态性

缺点：
* 服务器难以调整
* 服务器瓶颈
* 不易更新，因为服务器，客户端都有实现，相应的程序代码

应用：网络系统

变种：BS，3-Tier，P2P ～～～ Distributed System
