---
layout: post
title: 人机交互复习笔记
category: note
published: true
home: no
meta:
  location: NJU
tags: [HCI, review, note]
---

h2. 目录

* "概述":#overview
* "交互设计基础":#basic
* "简易的可用性工程":#usablility
* "交互式系统设计过程":#procedure
* "交互需求":#requirement
* "细节":#detail
* "可视化设计":#visual
* "评估基础":#eva-basic
* "评估 -- 观察用户":#eva-observe
* "评估 -- 用户测试":#eva-test
* "评估 -- 询问用户和专家":#eva-ask
* "交互模型":#model
* "以用户为中心":#ucd


h2(#overview). 概述

h3. 什么是人机交互

bq. HCI is a discipline concerned with the design, evaluation and implementation of interactive computing systems for human

h3. HCI 的研究内容

* 使用上下文
  ** 社会组织和工作
  ** 应用领域
  ** 人机匹配和适应
* 人
  ** 人类信息处理
  ** 语言、通信和交互
  ** 人机工程学
* 计算机
  ** 输入设备
  ** 对话技术
  ** 对话类型
  ** 计算机图形
  ** 对话架构
* 开发过程
  ** 设计方法
  ** 实现技术和工具
  ** 评估技术
  ** 示例系统和案例学习

h3. HCI VS SE

* 以用户为中心 VS 以功能为中心
* 评估方式不同
* 非形式化 VS 形式化
* 包含较多主观性和灵活性 VS 实施策略和方法学则上常有一定的倾向性

HCI 对 SE 促进，SE 方法实现交互的缺陷
* 没有提出明确地对用户界面及可用性需求进行描述的 方法
* 不能够在系统开发过程进行中对用户界面进行终端测 试
* 具有完善的系统功能
  ** 产品的可用性、有效性以及满意度并不高


h2(#basic). 交互设计基础

h3. 命令行交互

用户通过在屏幕某个位置上键 入特定命令的方式来执行任务(Character-based interface)

优点：
* 专家用户能够快速完成任务
* 较GUI节约系统资源
* 可动态配置可操作选项
* 键盘操作较鼠标操作更加精确
* 支持用户自定义命令

缺点：
* 命令语言的掌握对用户的记忆能力提出较高要求
* 基于回忆的方式(recall memory)
  ** 没有GUI基于识别的方式(recognition memory)容易使用
* 键盘操作，出错频率较高
* 要求用户记忆指令的表示方式
  ** 与可用性理论所强调的“不应要求用户了解计算机底层的实 现细节”相违背

h3. 菜单驱动界面

以一组层次化菜单的方式提供用户可用的功能选项，一个或多个选项的选择可以改变界面的状态

优点：
* 基于识别机制，对记忆的需求较低
* 具有自解释性
* 容易纠错
* 适合新手用户。若提供了较好的快捷键功能，则对于专家用户同样适用。

缺点：
* 导航方式不够灵活
* 当菜单规模较大时，导航效率不高
* 占用屏幕空间，不适合小型显示设备。
* 为节省空，通常组织为下拉菜单或弹出式菜单
* 对专家用户而言使用效率不高

h3. 基于表格的界面

显示给用户的是一个表格，里面有一些需要用户填写的空格

优点：
* 简化数据输入
* 只需识别无需学习
* 特别适合于日常文书处理等需要键入大量数据的工作

缺点：
* 占用大量屏幕空间
* 致业务流程较形式

h3. 直接操纵

* 用户通过在可视化对象上面进行某些操作来达到执行任务的目的
* 展现了真实世界的一种扩展
* 对象和操作一直可见
* 迅速且伴有直观的显示结果的增量操作
* 增量操作可以方便地逆转

直接操作的三个阶段：
* 自由阶段
* 捕获阶段
* 中止阶段

优点：
* 将任务概念可视化，用户可以非常方便地辨别他们
* 容易学习，适合新手用户
* 基于识别，对记忆的要求不高，可减少错误发生
* 支持空间线索，鼓励用户对界面进行探索
* 可实现对用户操作的快速反馈，具有较高的用户主观满意度

缺点：
* 实现起来比较困难
* 对专家用户而言效率不高
* 不适合小屏幕显示设备
* 对图形显示性能的需求较高
* 不具备自解释性，可能误导用户

h3. 问答界面：

通过询问用户一系列问题实现人与计算机的交互
* Web问卷是典型的采用问答方式进行组织的应用
* 应允许用户方便地取消其中一个界面的选项

优点：
* 对记忆的要求较低
* 每个界面具有自解释性
* 将任务流程以简单的线性表示
* 适合新手用户

缺点：
* 要求从用户端获得有效输入
* 要求用户熟悉界面控制
* 纠错过程可能比较乏味

h3. 隐喻界面

* 在用户已有知识的基础上建立一组新的知识，实现界面视觉提示和系统功能之间的知觉联系，进而帮助用户从新手用户转变为专家用户

优点：
* 主观生动
* 无需学习

局限性：
* 不具有可扩展性
* 不同用户对同一事物可能产生不同的联想
* 紧紧地将我们的理念和物理世界束缚在一起
* 寻找恰当的隐喻可能存在困难

h3. 自然语言交互

自然语言的模糊性
* The boy hit the dog with the stick.
* 她说她不知道

受限于理解技术，当前只能够使用受限的语言与计算机进行交流

？？？信息处理模型。。。

h3. 人类处理机模型

* 感知处理器
  ** 信息将被输出到声音储存和视觉储存区域
* 认知处理器
  ** 输入将被输出到工作记忆
* 动作处理器
  ** 执行动作

问题：
* 把认知过程描述为一系列处理步骤
* 仅关注单个人和单个任务的执行过程
  ** 忽视了复杂操作执行中人与人之间及任务与任务之间的互动
* 忽视了环境和其他人可能带来的影响
* 外部认知模型、分布式认知模型

h3. 格式心理学

研究人是如何感知一个良好组织的模式的，而不是将其视为一系列相互独立的部分：事物的整体区别于部分的组合

* 相近性原则：空间上比较靠近的物体容易被视为整体，设计界面时，应按照相关性对组件进行分组
* 相似性原则：人们习惯将看上去相似的物体看成一个整体，功能相近的组件应该使用相同或相近的表现形式
* 连续性原则：共线或具有相同方向的物体会被组合在一起，将组件对齐，更有助于增强用户的主观感知效果
* 完整和闭合原则：人们倾向于忽视轮廓的间隙而将其视作一个完整的整体，页面上的空白可以帮助实现分组
* 对称性原则：相互对称且能够组合为有意义单元的物体会被组合在一起，有的时候跟相近性冲突～～～
* 前景&背景：前景和背景在某些情况下可以互换，“整体区别于局部”

反例：让重点更突出

h3. 人的认知特性

* 感觉记忆 or 瞬时记忆，1s
* 短时记忆，感觉记忆编码后，30s，正在使用的，7+2
* 长时记忆，无限容量

h3. 7 + 2理论 VS 交互式系统设计

影响：各种只能有7个
事实：
* 浏览菜单和工具栏基于人的识别功能
* 人识别事物的能力要远胜于回忆事物的能力界面设计时要尽可能减小对用户的记忆需求，同时可考虑通过将信息放置于一定的上下文中，来减少信息 单元的数目

长时记忆的启发
* 注意使用线索来引导用户完成特定任务
* 在追求独特的创新设计时也应注重结合优秀的交互范型

视错觉的启示：对于物体的视觉感知与物体所处的上下文密切相关

h3. 交互设备

h4. 文本输入设备：

键盘
* 一般一次只能响应一个按键
* 新用户的击键速率大约为每秒钟1次，而熟练用户则能达到每秒15次的敲击频率
* 按键较多的硬盘可营造一种专业化的印象，新手用户望而生畏
* 小键盘特别适合移动设备应用，功能也可能因此受到限制
* QWERTY键盘

和弦键盘
* 能够同时响应多个按键，实现快速数据输入
* 学习使用时间也比较长

投影键盘
* 红外线技术跟踪手指的动作
* 可减小键盘所占的物理空间

手写输入
* 比较自然
* 输入速度慢

语音输入
* 受场景噪音影响
* 受识别效果影响，输入效率仅为键盘输入的一半

光学字符识别
* Optical character recognition，简称OCR
* 让计算机直接“阅读”
* 实现了大批量历史数据的信息化

h4. 定位设备

WIMP系统的显著功能
* 允许在屏幕上通过指点物体实现对物体的操作或是完成某项功能

鼠标:最常用的指点和定位设备
* 将鼠标拿离桌面再放到不同位置时，屏幕光标并不会发生移动
* 节省空间，但可能影响到新手用户的使用

触摸板:最广泛的膝上型电脑鼠标
* 通过电容感应来获知手指移动情况，对手指的热量并不敏感
* 手指在板上移动的距离与光标在屏幕上移动的距离之间的比率随手指移动的速度而变化
* 优点
  ** 反应灵敏、移动速度快
* 缺点
  ** 定位精度较低
  ** 手指出汗时会出现打滑，不适合在潮湿、多灰的环境

指点杆（小红帽）
* 操纵杆的变形
* 初学者较难上手
* 特点是定位准确，在火车等移动场景下也能够进行准确定位
* 可通过手指的力度控制鼠标光标移动的速度

触摸屏
* 通过手指或铁笔中断一个光线的阵列
* 较鼠标直观，定位的速度很快：适合于在屏幕上选择菜单条目
* 定位精度较差，在小范围选择比较困难
* 制造成本很高，容易污损

尖笔/光笔
* 较高的定位精度：在个人数字助理(PDA)中得到了普及
* 用户的手需要在设备间不断切换，交互效率下降
* 遮盖部分屏幕显示，设计界面，需要考虑用户手的摆放位置

h4. 图像输入设备

* 扫描仪
* 数码相机
* 传真机

h4. 显示设备

光栅扫描阴极射线管(Cathode ray tube，简称CRT)
* 优点：
  ** 图像色彩丰富
  ** 高清晰度、低成本
  ** 丰富的几何失真调整能力
* 缺点：
  ** 辐射
  ** 高电压具有潜在的爆炸危险
  ** 占据较大空间

液晶显示器
* 优点
  ** 低辐射、低耗能
  ** 体积小质量轻
  ** 可视面积大，不存在几何和线性失真
* 缺点
  ** 价格昂贵
  ** 侧面显示会失真
  ** 响应时间慢
  ** 使用寿命有限

等离子监视器
* 优点
  ** 可视角度较液晶显示器大
  ** 更好的颜色质量和对比度
* 缺点
  ** 使用寿命也较短
  ** 易产生残留影像

发光二极管
* 优点
  ** 耗电量小
  ** 反应时间快
  ** 使用寿命长
  ** 体积小
* 缺点
  ** 价格昂贵
  ** 使用寿命与散热性能的好坏密切相关


电子墨水
* 优点
  ** 易读性好、低功耗、成本低、质量小
  ** 可以应用到纸上或布上，产生和报纸一样的显示效果
  ** 具有较好的柔性，可折叠

...

h3. 交互框架

h4. EEC

作用：
* 提供理解或定义某种事物的一种结构
* 能够帮助人们结构化设计过程
* 认识设计过程中的主要问题
* 还有助于定义问题所涉及的领域

执行/评估活动周期EEC：
* 最有影响力的框架
* 定义了活动的四个组成部分
  ** 目标(Goal) != 意图(Intention)
  ** 执行(Execution)
  ** 客观因素(World)
  ** 评估(Evaluation)

目标 VS 意图
* 单个目标可对应多个意图
  ** 举例:删除文档中的部分内容的目标
  ** 意图1:通过编辑菜单删除
  ** 意图2:通过删除按钮删除
  ** 每个意图可包含一系列活动

EEC模型
# From the goal
# From the intention
# Specifiy the action
# Excute the acion
# Perceive the system state
# Interpret the system state

* 从用户视角探讨人机界面问题
* 共有七个阶段
  ** 1-4:执行阶段
  ** 5-7:评估阶段
* 每个循环代表一个动作

h4. 执行隔阂和评估隔阂

EEC模型可解释为什么有些界面的使用存在问题？
执行隔阂
* 用户为达目标而制定的动作与系统允许的动作之间的差别
* “保存文件”举例
评估隔阂
* 系统状态的实际表现与用户预期之间的差别

意义
* 如何才能够使用户简单地确定哪些活动是被允许的
* 如何确定系统是否处于期望的运行状态等问题

h4. 扩展EEC

* EEC模型不能描述人与系统通过界面进行的通信
* 四个构成部分+四个步骤(翻译过程)
  ** 系统:内核语言
  ** 用户:任务语言
  ** 输入:输入语言
  ** 输出:输出语言
* 执行阶段
  ** 定义，执行，表现
  ** 设计人员应保证从输入到系统的翻译是容易的
* 评估阶段：观察

h2(#usablility). 简易的可用性工程

h3. 可用性目标

* 易学性（learnability）
  ** 指使用系统的难易，即系统应当容易学习，从而用户可以在较短时间内应用系统来完成某些任务
  ** 最基本的可用性属性
  ** 10 分钟法则
* 易记性（memorability）
  ** 用户在学会使用软件后应当容易记忆
  ** 学会某个系统后，应能够迅速回想起它的使用方法
  ** 影响因素：位置，分组，惯例，冗余
  ** 启发：良好组织，使用用户已有的经验帮助提高易记性
* 低出错率
  ** 人是会犯错误的
    *** 有些错误会被用户发现并纠正
    *** 有些错误会带来灾难性后果
  ** 措施
    *** 保证导致灾难性后果错误的发生频率降到最低
    *** 保证错误发生后迅速恢复到正常状态
* 有效率（efficiency）
  ** 用户学会使用产品之后，用户应该具有更高的生产力水平(效率)
  ** 效率指熟练用户到达学习曲线上平坦阶段时的稳定绩效水平
* 主观满意度
  ** 用户对系统的主观喜爱程度
  ** 某些情况下，系统的娱乐价值比完成任务的速度更为重要
  ** 观念的转变
    *** 传统软件质量观：侧重内部效率和可靠性，如程序代码运行时的效率以及灵活性、可维护性
    *** 人机交互软件质量观，转向用户视角

h3. 用户体验目标

问题：到底什么样的产品才是用户愿意使用和购买的？

h4. 什么是用户体验？
* 用户在与系统交互时的感觉
* 为儿童创建的网站应该要有趣并且引人入胜
* 面向年轻人的网站则应该更注重时尚感和趣味性
* 较可用性目标主观
* 可用性可能对用户体验带来阻碍

h3. 简易的可用性工程

h4. 特点
* 以提高产品的可用性为目标的先进的产品开发方法论
* 借鉴了许多不同领域的方法和技术
* 强调以人为中心来进行交互式产品的设计研发

h4. 常用方法
* 选择一些能够代表目标用户群体的测试用户
* 让这些用户使用系统执行一组预定的任务
* 比较任务的执行情况
* 针对多维属性
  ** 取每个可用性属性的平均值
  ** 查看整体分布情况

h4. 主观满意度度量例子
* 在1~5分的5分制情况下平均值至少为4
* 或至少50%的用户给系统打5分或给系统打1分的用户不超过5%

h4. 注意
* 度量一定要针对特定的用户和特定的任务进行
* 用户对不同任务的可用性结果预期可能不同
  ** 用于编辑邮件的文字处理程序和用于编写数万页技术文档的文字处理程序的要求是不同的
* 因此测试前要明确一组具有代表性的测试任务

h4. 易学性度量

# 找一些从未使用过系统的用户，1）能够代表系统的目标用户，2）区分新手和有一般计算机经验的人
# 统计他们学习使用系统直至达到某种熟练程度的时间

特定熟练程度
* 用户能够完成某个特定的任务
* 或用户能够在特定的时间内完成一组特定任务
* 原因：学习曲线没有明确区分“学会和未学会”

h4. 使用效率度量

并不是所有用户都能够迅速达到最终的绩效水平
* 用户自身的原因
* 少量系统的操作十分复杂

同样要区分不同的用户群体
* 对于有经验的用户
  ** “有经验”较为正规的衡量方式是通过使用系统的小时数来定义的
  ** 先使用，然后度量其绩效水平
  ** 或为用户绘制学习曲线
  ** 当发现用户的绩效水平在一段时间内不再提高时，就认为已经达到了该用户的稳定绩效水平

h4. 易记性度量

用户分类
* 新手用户，熟练用户，非频繁使用用户
* 对非频繁使用用户进行测试最能体现系统的易记性

度量方法
* 对在特定长时间内没有使用系统的用户进行标准用户·测试
  ** 记录下这些用户执行特定任务所用的时间
* 对用户进行记忆测试
  ** 如在用户完成一个应用系统的特定任务后，让用户解释各种命令的作用

h4. 错误率度量

通常指不能实现预定目标的操作

度量
* 在用户执行特定任务时通过统计这种操作的次数
* 可以在度量其他可用性属性的同时来度量

错误分类
* 错误发生后能够被用户立刻纠正，不会对系统带来灾难性的影响，往往会被包含在使用效率的统计当中
* 不易于被用户发现，从而可能造成最终结果存在问题，设计人员在设计时也应该将其发生的频率降到最低

h4. 满意度度量

满意度度量评价都是主观的
* 以询问用户的方式进行度量更合适
* 为减少单个用户评价的主观性，把多个用户的结果综合起来取其平均值

度量通常在用户测试完成后进行
* 要求用户通过简单的调查问卷对系统打分
  ** 可以1-5或1-7的Likert度量尺度或语义差异尺度作为打分标准
  ** 一定要在用户使用系统执行真实的任务之后再来询问他们的看法

h3. 四种主要技术

完整的可用性工程过程
* 了解用户
* 竞争性分析
* 设定可用性目标
* 用户参与的设计
* 迭代设计
* 产品发布后的工作

简化
* 用户和任务观察
  ** 了解产品的目标用户是可用性工程的第一个步骤
  ** 要直接与潜在用户进行接触，不要满足于间接的接触和道听途说
* 场景(scenario)
  ** 简便易行的原型工具
  ** 通过省略整个系统的若干部分来减少实现的复杂性
  ** 水平原型：减少功能的深度并获得界面的表层
  ** 垂直原型：减少功能的数量而对所选功能进行完整实现
  ** 可以是纸质模型：也可以是简单的RAD原型
* 简化的边做边说(thinking aloud)
  ** 让真实用户在使用系统执行一组特定任务的时候，讲出他们的
所思所想
  ** 最有价值的单个可用性工程方法
  ** 可了解用户为什么这样做，并确定其可能对系统产生的误解
  ** 实验人员需要不断地提示用户，或请他们事先观摩
* 启发式评估(专家？)
  ** 研究表明，能够发现许多可用性问题
  ** 剩下的可以通过简化的边做边说方法来发现
  ** 为避免个人的偏见，应当让多个不同的人来进行经验性评估

h3.设计规则

h4. 基本规则
* 可学习型，新用户能用它开始有效的交互并能获得最大的性能
* 灵活性，用户和系统能以多种方式交换信息
* 健壮性，在决定成就和目标评估方面对用户提供的支持程度

h4(#rule). 黄金规则

# 尽可能保证一致，是界面熟悉，可预测（动作序列，菜单中的属于，字体，颜色，布局）
# 符合普遍可用性（熟练程度，年龄范围）
# 提供信息丰富的反馈，界面对象的可视化表现
# 设计说明对话框以生成结束信息
# 预防并处理错误
  ** 将不适当的菜单选项功能以灰色显示屏蔽
  ** 禁止在数值输入域中出现字母字符
  ** 提供简单的、有建设性的、具体的指导来帮助用户恢复操作
# 让操作容易撤销
# 支持内部控制点
  ** 避免模态对话框
  ** 避免很长的引导序列
  ** 提供出口:取消、重做、放弃等
# 减轻短时记忆负担
界面显示尽可能简单
  ** 不同显示页面的风格应该统一
  ** 尽可能减少在窗口之间的移动
  ** 并且要确保提供用户足够的学习代码、记忆操作方法 和操作序列的时间
  ** 提供适当的在线帮助信息

h4. 启发式规则

# 系统状态的可见度
# 系统和现实世界的吻合
# 用户享有控制权和自主权
# 一致性和标准化
# 避免出错
# 依赖识别而非记忆
# 使用的灵活性和高效性
# 审美感和最小化设计
# 帮助用户识别、诊断和恢复错误
# 帮助和文档

h2(#procedure). 交互式系统设计过程

h3. 设计过程的基本活动

* 标识用户需要并建立需求
  ** 必须了解谁是目标用户
  ** 交互式产品应提供哪些支持
  ** 最基本的
* 开发满足需求的候选设计方案
  ** 设计的核心活动
  ** 概念设计和物理设计
* 构建设计的交互式版本
  ** 评价设计的最佳方法就是让用户与产品交互
  ** 不一定是可运行的软件版本
* 评估设计
  ** 评估它的可用性和可接受性
  ** 制定各种评估标准

h3. 关键特征

* 以用户为中心
  ** 人机交互领域的一个核心观点
* 稳定的可用性标准
  ** 有助于设计人员选择不同的候选方案
  ** 并在产品开发过程中随时检查
* 迭代
  ** 设计人员不可能一次就找出正确的解决方案
  ** 利用反馈来改进设计

h3. 瀑布模型

贡献：
* 把分析和编码作为了模型的两个主要组成部分
* 第一个得到广泛承认的模型

缺点：
* 以文档为中心，用户难以理解
* 不适用于交互式软件产品的开发
* 假设需求是不变的

h3. 螺旋模型

* 以降低风险为中心
* 引入了迭代的思想

缺点：
* 过于复杂，客户难以掌握
* 风险评估需大量信息
* 未发现的风险是棘手的

h3. 原形法

优点
* 易于用户提供反馈
* 减少了开发时间和成本
* 用户参与到开发过程中

h3. 星型生命周期模型 - HCI

* 分析模式：自定向下、组织化、判定和正式化，它是从系统到用户的方法
* 合成模式：自底向上、自由思考、创造性，这是由用户至系统的方法
* 特点：
  ** 没有指定任何活动次序
  ** “评估”是这个模型的核心
  ** 源于开发人员的实际经验

<div class="row">
  <div class="span6 thumbnail">
  !http://sheimi.me/images/blog/notes/HCI-star.png!
  </div>
</div>

h3. 可用性工程生命周期 – HCI领域

* 体现了可用性工程的总体概念
* 详细描述了如何执行可用性任务
* 说明了如何把可用性任务集成到传统的软件开发生命周期中

h3. 设计过程的管理

* 以用户为中心的设计
  ** 在开发过程中产生尽可能少的错误
  ** 开发费用少和维护成本低
  ** 易于学习、执行速度更快
  ** 鼓励用户探索
  ** 应尽早使用

h3. 合理的以用户为中心的交互设计，LUCID

* 预想：发展清晰、共享的产品场景，使概念草案具体化 * 发现：研究用户以决定高端的用户需求、术语和智力模型
设计基础：发展概念设计，创造关键屏幕画面原型
设计细节：将高端设计加以充实，形成完备的详细说明书
构建：通过回顾和后期改变管理方式来支持生产过程
发布：
通过有力的推广来支持用户向新产品的过渡；进入最后的可用性测试

h2(#requirement). 交互需求

h3. 是什么

* 关于目标产品的一种陈述，它指定了产品应做什么，或者应如何工作
* 具体、明确、无歧义

h3. 需求活动

* 搜集数据
* 解释数据
* 提取需求

h3. 特性

* 功能
* 物理条件
* 使用环境（物理，社会，组织，技术）

h3. 用户差异

* 体验水平：
  ** 让新手快速和无痛苦地成为中间用户
  ** 避免为想成为专家的用户设置障碍
  ** 让中间用户感到愉快，因为他们的技能将稳定地处于中间层
* 年龄（老人，儿童）
* 文化（姿势，颜色，符号等）
* 健康（残疾...）

新手：敏感，且容易在开始有挫折感
* 不能将新手状态视为目标
* 让学习过程快速且富有针对性
* 确保程序充分反映了用户关于任务的心智模型
* 无论什么样的帮助,都不应该在界面中固定
* 具有向导功能的对话框帮助较好，不要使用在线帮助作为学习指导
* 菜单项应该是解释性的

专家用户：
* 对缺少经验的用户有着异乎寻常的影响，“专家说不好就不好”
* 欣赏更新的且更强大功能
* 不会受到复杂性增加的干扰
* 对经常使用的工具集，要能快速访问

中间用户：
* 需要工具
* 知道如何使用参考资料
* 能够区分经常使用和很少使用的功能
* 高级功能的存在让永久的中间用户放心
* 设计要求
  ** 工具提示(Tooltip)是适合中间用户最好的习惯用法
  ** 在线帮助是永久中间用户的极佳工具
  ** 常用功能中的工具放在用户界面的前端和中心位置
  ** 提供一些额外的高级特性

h3. 用户建模

* 非真实，基于观察到的人的行为和动机，代表真实的人，综合原型
* 弹性用户，资参考设计，边缘情况设计

基于如下问题：
* 谁将使用系统？
* 这些用户属于哪些类型的人群？
* 是什么因素决定他们将怎样使用系统？
* 他们与软件的关系有什么特征？
* 他们通常需要软件提供什么支持？
* 他们对软件会有怎样的行为？他们对软件的行为有什么期望？

过程：拼凑，组织，细节，求精  （循环）

h3. 需求获取

* 观察（直接，间接）
* 场景（讲故事，非正式描述）

任务角色 +　场景　=　需求

* 创建问题和前景综述
* 头脑风暴
* 人物角色的期望（与心里模型匹配）
* 构建情境场景剧本（关注活动，心里模型和动机）
* 确定需要（数据需求，功能需求，其他需求）

h3. 任务分析

记录人们如何完成任务的一种方式

层次化任务分析（HTA）是应用最广的任务分析技术
* 把任务分解为若干子任务,再把子任务进一步分解为更细致的 子任务。之后,把他们组织成一个“执行次序”,说明在实际 情形下如何执行各项任务


h3. 原形

* 低保真
* 高保真

h4. 设计框架

# 定义外形因素和输入方法
# 定义功能和数据元素
# 决定功能组合层次
# 勾画大致的设计框架
# 构建关键情境剧本线路
# 通过验证性的场景剧本来检查设计

h2(#detail). 细节

h3. 交互设计模式

定位模式、结构模式、行为模式
例子：向导模式

h3. 切分内容

* List of Objects
* List of Actions
* List of Subject Categories
* List of Tools

h3. 物理结构

* 多窗口
* 单一窗口分页
* 平铺窗口
* 用户是关键

* Two Panel Selector
* Canvas plus palette
* One-Window DrillDown
* Alternative Views
* Wizard
* Extras on Demand
* Intriguing Branches
* Multi-Level Help

h4. 设计的折衷

* 个性化和配置
* 本地化和国际化
* 审美学和实用性

h4. 软件设计中的考虑

* 加快系统的响应时间
* 减轻用户的记忆负担
* 减少用户的等待感
* 设计好的出错信息

h2(#visual). 可视化设计

h3. 窗口

* 最大化
* 最小化
* 还原：平铺、重叠、层叠

h4. 类型

* 多文档界面
  ** 节省系统资源，最小可视集，协同工作区，多文档同时可视化
  ** 不一致性，必须在内部，复杂
* 单文档界面
  ** 从用户角度处罚，以文档为中心；界面视觉复杂性小
  ** 不能管理分散但相关文档；不能分离；任务栏占满
* 标签文档界面
  ** 让用户看到哪些窗口是打开的
  ** 不允许用户看到两个及以上的窗口内容

h3. 菜单

* 菜单标题
* 菜单选项
* 描述性，一致性

h4. 菜单栏

* 所有窗口必备的基本组件
* 菜单栏是代表下拉式菜单的菜单
* 菜单选项的标签、位置、归类等均已标准化
  ** 从左向右：文件、编辑、视图和窗口，帮助位于窗口的最右边
  ** 可选菜单常出现在编辑和窗口菜单之间

h4. 注意事项

* 菜单应该按语义及任务结构来组织
  ** 糟糕的例子：File菜单
* 合理组织菜单接口的结构与层次
  ** 菜单太多或太少都表明菜单结构有问题
* 菜单及菜单项的名字应符合日常命名习惯
* 菜单选项列表即可以是有序的也可以是无序的
  ** 频繁使用的菜单项应当置于顶部
* 为菜单项提供多种的选择途径
  ** 尽可能使用工业标准
* 对菜单选择和点取设定反馈标记
  ** 如灰色屏蔽,为选中的菜单项加边框在菜单项前面加√符号等

h3. 对话框

* 模态 vs 非模态
* 属性对话框
* 功能对话框
* 进度对话框
* 公告对话框
* 错误对话框
* 警告对话框
* 确认对话框

h4. 消除确认对话框，原则

# 做，不要问
# 让所有操作都可以撤销
# 提供非模态反馈帮助用户避免犯错误

h4. 管理对话框内容

* 标签对话框，不要堆叠标签
* 扩展对话框
* 级联对话框，糟糕

h4. 对话框设计原则

* 把主要的交互操作放在主窗口中
* 视觉上区分模态与非模态对话框
* 不要用临时对话框作为错误信息框或确认信息框
* 不要堆叠标签

h3. 工具栏

h4. 工具栏 VS 菜单

* 都提供对程序功能的访问
* 菜单提供完整的工具集，主要用于教学
* 工具栏是为经常使用的命令设置的，对新手用户帮助不大
  ** 工具提示可以在一定程度上缓解这个问题
* “工具栏是单行(或单列)排列且始终可见的图形化立即菜单项”

h4. 图标 VS 文本

* 文本标签精确，但阅读与识别速度较慢
* 工具栏和菜单的用途不同
  ** 工具栏主要为常用功能提供快速访问
  ** 图形的表意特征较文本更适合担当这种角色
* 图标图像
  ** 找代表事物的图像比寻找代表动作或关系的图像容易得多，如垃圾桶、打印机等

h3. 布局复杂度

pass

h3. 用户界面设计原理

h4. 结构原理：相关东西防疫器，不相关的东西分开
* 好的用户界面设计对用户界面的组织方式应符合所支持工作的结构，符合用户对工作的认识
* 过滥地运用隐喻会让用户界面难以理解

h4. 简单性原理：提供与其语义相关的快捷方式
* 应从用户的角度来看什么任务更常用、什么任务更简单
* 并不一定非要进行调查获广泛研究
* 软盘格式化实用程序举例
  ** 没有考虑最简单、最常用和最核心的任务究竟是什么
  ** 让必要的确认和次要功能干扰了本来很简单的常用任务的顺利执行

h4. 可见性原理：所有选项和材料对用户可见
* 在“所见即所得”的基础上,进一步实现“所见即所需”
  ** 设计目标是让所有需要和相关的选项可见和明确
  ** 不应让用户被不必要的信息所迷惑
* 传真机管理程序举例
  ** 功能的取名以及在用户界面上的位置安排存在问题
  ** 是一个由内向外的设计

h4. 反馈原理：时刻了解系统对操作的反应和解释
* 成功的反馈就是以能被对方注意到、读到和正确理解的方式来提供信息
  * 屏幕中央和顶端出现的反馈容易被注意
  * 屏幕底端是最不容易被注意到的
* 好的出错信息
  * 以一个能让用户马上知道问题何在的题头开始
  * 有针对性和简洁地解释问题究竟是什么
  * 建议解决问题的方法或操作步骤

h4. 宽容原理：保持灵活和宽容；提供撤销，重做；防止用户出错
* 高可用性的系统帮助用户少犯错误
* 宽容性如何取决于将什么数据检测为有效以及何时进行这种合法性检查
  ** 检查后，在返回给用户的屏幕上将所有不合法的数据域置为高亮度，把光标放在第一个出错的数据域，并且在状态栏中给出解释的话
  ** 过分使用合法性检查会降低可用性

h4. 重用原理：加以重用，维持一致性，减少用户思考，记忆
* 用户界面内在外观、位置以及行为上的一致性使得软件容易学习和记忆如何使用
  ** 界面更具有可预测性和更容易理解
* 重用程度越高,一致性就越好
  ** 不一致的用户界面不仅会降低软件的可用性,而且会增加程序设计的工作量

h2(#eva-basic). 评估基础

h3. 优点

* 在交付前修复错误
* 使小组专注真实问题，而不是家乡问题
* 使工程师专心于编程而非争论
* 大大缩短开发时间
* 销售部门可获得稳定的设计

h3. 目标

* 评估系统功能的范围和可达性
* 评估交互中的用户体验
* 确定系统的默写特定问题

h3. 评估原则

* 应该依赖与产品的用户
* 与设计应结合进行
* 在实际工作任务和操作环境下进行
* 选择有代表性的用户

h3. 范型

h4. 快速评估

* 非正式询问
* 快速

h4. 可用性测试

* 评测典型用户执行任务时的典型情况
* 在评估人员控制下进行
* 量化执行情况
* 缺点：用户数量少，不适合进行细致的统计分析

h4. 实地研究

* 在自然环境中进行
* 评测人员作为局外人，也可作为局内人
...

h4. 预测性评估

* 专家预测
* 用户不再场
* 快速，成本低
* 可能误导

<div class="row">
  <div class="span6 thumbnail">
  !http://sheimi.me/images/blog/notes/HCI-eva-1.png!
  </div>
</div>

h3. 技术

* 观察用户
  ** 有助于确定新产品的需求
  ** 也可用于评估原型
  ** 挑战:如何在不干扰用户的前提下观察用户，以及如何分析大量数据
* 询问用户意见：几个到几百
* 询问专家意见
  ** “角色扮演”方式评估
  ** 同时专家会提出解决方案
* 测试用户的执行情况
  ** 可比较不同设计方案优劣
  ** 通常在受控环境中进行
* 基于模型和理论，预测界面的有效性
  ** 常用技术如GOMS模型和KLM模型等

h4. 区分评估技术的因素

* 在周期中的位置：早起更快、便宜
* 评估形式：实验室环境、工作环境
* 技术的主客观
* 测量类型：与主客观有关，主：定性，客：定量
* 提供的信息：底层，高层
* 响应及时性
* 干扰程度：是否影响用户表现
* 所需资源

<div class="row">
  <div class="span6 thumbnail">
  !http://sheimi.me/images/blog/notes/HCI-eva-2.png!
  </div>
</div>

<div class="row">
  <div class="span6 thumbnail">
  !http://sheimi.me/images/blog/notes/HCI-eva-3.png!
  </div>
</div>

h4. 评估方法组合

* 启发式评估 + 边说边做等用户测试技术
* 访谈 + 问卷调查

h3. DECIDE 评估框架

h4. 六个步骤

* 决定评估需要完成的总体目标 (Determination)
* 发掘需要回答的具体问题 (Explore)
* 选择用于回答具体问题的评估范型和技术 (Choose)
* 标识必须解决的实际问题,如测试用户的选择 (Identify)
* 决定如何处理有关道德的问题 (Deside)
* 评估解释并表示数据 (Evaluation)

h3. 可用性分级

* 量化数据
* 问题严重性主观打分
* 可用性分级的两个因素：多少用户会遇到这个问题，用户受影响程度
* 问题是否永远出现

h2(#eva-observe). 评估 -- 观察用户

h3. 方式

* 真实环境中
* 受控环境中
* 差别不大，相互补充等

h3. 观察框架

h4. Goetz and Lecomfte

* 人员
* 行为
* 时间
* 地点
* 原因
* 方式

h4. Robson 框架

* 空间
* 行为者
* 活动
* 物体
* 举止
* 时间
* 目标
* 感觉

h3. 观察中的问题

* 不知道用户在想什么
* 方案：边说边做；简单；不自然

h3. 观察方式

* 合作评估
* 实验室观察
* 现场观察

h3. 注意事项

* 保持安静
* 无法理解是，打断并记录
* 拒绝帮助

h3. 方式

* 观察访谈结合
* 数据记录（纸笔，音频记录，日志和交互记录）

h3. 问题清单

* 明确初步的研究目标和问题
* 选择一个框架指导观察
* 决定数据记录的方式
* 评估后，尽快与观察者或被观察者共同检查所记录的笔记和其他数据
* 数据记录时，应区分个人一件和观察数据
* 培养良好的合作关系
* 处理敏感问题
* 注重团队协作
* 从不同角度观察，避免只专注与特定行为


h3. 分析方法

定性分析：内容分析，会话分析，话语分析
定量分析：统计分析（平均值，标准偏差，T检验）

h2(#eva-test). 评估 -- 用户测试

h3. 测试设计

* 在受控环境中(类似于实验室环境)测量典型用户执行典型任务的情况
* 目的是获得客观的性能数据，从而评价产品或系统的可用性，如易用性、易学性等
* 最适合对原型和能够运行的系统进行测试
* 可对设计提供重要的反馈
* 在可用性研究中，往往把用户测试和其他技术相结合

h4. 折衷

* 确保参与者的测试条件相同
* 确保评估目标特征具有代表性
* 实验可重复，得不到同样结果
* 以DECIDE框架为基础

* 定义目标和问题
* 选择参与者
  ** 各种情形参与者不同
  ** 各种情形参与者相同（顺序效应）
  ** 参与者配对（技能，性别）
* 设计测试任务：简单；复杂；5 - 20min
* 明确测试步骤（正式测试前的小规模测试）
* 数据搜集
* 数据分析

例子，ch10-16

<div class="row">
  <div class="span6 thumbnail">
  !http://sheimi.me/images/blog/notes/HCI-eva-4.png!
  </div>
</div>


h2(#eva-ask). 评估 -- 询问用户和专家

* 观察用户
* 询问用户
* 请专家帮忙

h3. 询问用户：访谈

* 开放式（非结构化），结构化，半结构化，集体访谈
* 避免过长问题
* 避免使用复合句
* 避免让用户尴尬，无法理解
* 避免诱导性问题
* 尽可能中性

h3. 询问用户：问卷调查

* 单独使用，结合使用
* 问题明确具体
* 采用封闭式问题和答案选项
* 提供“无看法”选项
* 提问次序
* 避免复杂
* 登记标尺直观，一致，不重叠
* 没有术语

h3. 访谈

* 形式更自由
* 难以获得确切数据
* 需要花费更多的时间
* 在访谈后立刻得到结果
* 可能回避“敏感问题”的真实想法

h3. 问卷与访谈

* 都是间接的方法
* 不能完全听信和采纳用户说法

h3. 认知走查

* 逐步检查使用系统执行任务的过程，从中找出可用性问题
* 无需用户参与
* 试图想象出人们在第一次使用某个产品时的想法以及所采取的动作，它的大作流程是怎样的
* 评估的具体过程就是把用户在完成这个功能时所做的所有动作讲述成一个令人可以信服的故事

* 正确的操作对于用户是否足够明显
* 用户能否注意到正确的操作
* 能否正确解释操作的响应

* 无用户参与
* 无需可运行的原型
* 可以找出非常具体的用户问题
* 工作量大，费时，关注面有限

h4. 步骤

* 标识并记录用户的特性
* 基于评估重点，设计样本任务
* 制作界面原形，明确用户任务的具体步骤
* 由设计人员和专家级评估人员共同进行分析
* 评估人员应结合应用的上下文，逐步检查每一项的步骤
* 在逐步检查之后，汇总关键信息
* 修改设计，更正发现的问题

h3. 协作走查

* 用户、开发人员、可用性专家协作
* 专注与用户任务：可以产生定量数据
* 符合参与式设计原则
* 需要各方面的专家，速度慢
* 由于时间限制，通常智能评估有限的场景

h3. 询问专家 -- 启发式评估

* 廉价
* "Nielsen十条启发式规则":#rule
* 阶段：
  ** 介绍
  ** 评估
  ** 总结
* 分析
  ** 优点：无用户，无道德问题和实际问题限制；成本低，快；经济评估法
  ** 缺点：长时间训练变为专家；可能出现虚假警报

h3. 7条启发式原则

* 内部一致性
* 对话简单性
* 快捷连接
* 尽可能减轻用户负担
* 预防错误
* 提示信息
* 内部控制

h3. 评估网站

h4. 导航

* 如何辗转于各个网页之间而又不“迷失方向”
* 避免使用孤立网页
* 避免使用带有大量空白的长网页,不应强迫用户滚屏
* 提供浏览指引，如在每个网页上提供至网站导航图的链接
* 避免使用少而“深”的层次化菜单
* 避免使用非标准的颜色表示链接
* 注意保持外观和质感上的一致性

h4. 访问

* 如果网速较慢或者机器的处理能力有限,用户在访问许多网站时就可能遇到问题
* 避免使用复杂的URL
* 避免因为下载时间过长，而造成用户反感

h4. 信息设计
* 应考虑到内容的可理解性和美感

h3. HOMERUN 启发式原则（商务网站）

* 高质量内容
* 实施更新
* 最小下载时间
* 易用
* 符合用户需要
* 在线媒体的唯一性
* 网络化的企业文化

h3. Good Web Site

* Well-organized
* Easy to navigate
* Attractive
* Useful
* Up-to-date

h2(#model). 交互模型

* KLM：计算用户完成任务的时间
* 动态转移网：描述交互过程中的系统状态变化
* GOMS：探讨任务的执行方法

h3. 预测模型

能够预测用户的执行情况，但不需要对用户做实际测试，适合无法进行用户测试的情形

* GOMS，击键层次模型
* Fitts 定律

h3. GOMS模型

* 基于人类处理机模型，反之整个GOMS模型体系
* 是关于人类如何执行认知—动作型任务以及如何与系统交互的理论模型
  ** 采用“分而治之”的思想，将一个任务进行多层次的细化
  ** 把每个操作的时间相加就可以得到一项任务的时间

h4. 全称

* Goal
* Operator（外部 + 心理）
* Method（外部 + 心理）
* Selection

h4. 分析

优点：可以从容地对不同界面进行分析比较
局限：假设用户以完全正确的方式；只针对专家用户；忽略用户间的个体差异；任务描述过于简单

h4. 4种

* 击键层次模型（时间）
* CMN GOMS
* NGOMSL
* GPM GOMS

h3. KML

建模可以给出执行标准任务的时间，没有考虑错误、学习性、功能性、回忆、专注程度、疲劳、可接受性

h3. Fitts 定律

* 目标大小，目标距离
* ID =log<sub>2</sub>(A / W + 1) (bits)
* MT = a + b * ID (secs) a, b 线性回归
* IP = ID / MT (bits/sec) (吞吐量)

h4. Fitts 建议

* 大目标、小距离具有优势
* 屏幕元素应该尽可能多的占据屏幕空间
* 最好的像素是光标所处的像素
* 屏幕元素应尽可能利用屏幕边缘的优势
* 大菜单,如饼型菜单,比其他类型的菜单使用简单

* 缩短当前位置到目标区域的距离：右键
* 增大目标大小以缩短定位时间

h4. 动态特性建模等

...

h2(#ucd). 以用户为中心

h3. 背景

* 以真实用户和用户目标作为产品开发的驱动力，而不 仅仅是以技术为驱动力
* 应能充分利用人们的技能和判断力，应支持用户而不是限制用户
* 需要透彻了解用户及用户的任务，并使用这些信息指导设计
* 这是一种设计思想，而不是纯粹的技术

h3. 三个方面的假设

* 好的设计结果使客户感到满意
* 设计过程是设计人员与客户之间的协作过程
  ** 设计要进化并适应客户不断变化的考虑
  ** 规格说明是该过程的副产品
* 在整个过程中，客户和设计人员要不断沟通

h3. 以用户为中心的设计原则

* 及早以用户为中心
* 综合设计
* 及早并持续性地进行测试：用户认为可行即可行
* 迭代设计

h3. 包含方法

* 用户参与
* 焦点小组
* 问卷调查
* 民族志观察
* 走查
* 专家评估
* 可用性测试

h3. 参与形式

* 设计组成员
* 讨论会议的形式
* 折衷方案...

PICTIVE and CARD?

h3. 上下文询问法

* 上下文环境
* 伙伴关系
* 解释
* 焦点

h3. 以活动为中心

h4. 以用户为中心的缺陷

* 影响产品的创新性
* 可操作性受到时间、预算和任务规模的限制
* 忽视了人的主观能动性和对技术的适应能力

h4. 设计思想

* 把用户要做的“事”(活动)作为重点关注的对象
* 更适合于复杂的设计项目
* 倾听用户永远是明智的,但屈从于用户的要求是不明智的
